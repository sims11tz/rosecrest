name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        server: [aws_california, aws_ohio, aws_paris, aws_tokyo, aws_dublin, aws_brazil]

    environment: rose_crest 

    env:
      EC2_USER: ${{ secrets.EC2_USER }}
      EC2_KEY: ${{ secrets.EC2_KEY }}

    steps:

    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '20'

    - name: Create symbolic link
      run: |
        cd client/src
        ln -s ../../shared ./

    - name: Install dependencies and build client
      run: |
        cd client
        npm install
        CI=false npm run build2

    - name: Install server dependencies
      run: |
        cd server
        npm install

    - name: Set EC2_HOST for aws_california
      if: matrix.server == 'aws_california'
      run: echo "EC2_HOST=${{ secrets.EC2_HOST_AWS_CALIFORNIA }}" >> $GITHUB_ENV

    - name: Set EC2_HOST for aws_ohio
      if: matrix.server == 'aws_ohio'
      run: echo "EC2_HOST=${{ secrets.EC2_HOST_OHIO }}" >> $GITHUB_ENV

    - name: Set EC2_HOST for aws_paris
      if: matrix.server == 'aws_paris'
      run: echo "EC2_HOST=${{ secrets.EC2_HOST_PARIS }}" >> $GITHUB_ENV

    - name: Set EC2_HOST for aws_tokyo
      if: matrix.server == 'aws_tokyo'
      run: echo "EC2_HOST=${{ secrets.EC2_HOST_TOKYO }}" >> $GITHUB_ENV

    - name: Set EC2_HOST for aws_dublin
      if: matrix.server == 'aws_dublin'
      run: echo "EC2_HOST=${{ secrets.EC2_HOST_DUBLIN }}" >> $GITHUB_ENV

    - name: Set EC2_HOST for aws_brazil
      if: matrix.server == 'aws_brazil'
      run: echo "EC2_HOST=${{ secrets.EC2_HOST_BRAZIL }}" >> $GITHUB_ENV

    - name: Create snapshot of the current directory
      run: |
        mkdir temp_snapshot
        rsync -av --exclude='temp_snapshot' ./* temp_snapshot/

    - name: Create tar.gz archive from snapshot
      run: |
        tar czf deploy.tar.gz -C temp_snapshot/ .
        rm -rf temp_snapshot

    - name: SSH and clear server stuff
      run: |
        echo "${{ env.EC2_KEY }}" > key.pem
        chmod 600 key.pem
        ssh -o StrictHostKeyChecking=no -i key.pem "${{ env.EC2_USER }}@${{ env.EC2_HOST }}" << 'EOF'
        sudo rm -rf /var/www/rosecrest/*

    - name: Deploy to EC2
      run: |
        echo "${{ env.EC2_KEY }}" > key.pem
        chmod 600 key.pem
        scp -o StrictHostKeyChecking=no -i key.pem deploy.tar.gz "${{ env.EC2_USER }}@${{ env.EC2_HOST }}:/var/www/rosecrest"

    - name: SSH and extract deploy
      run: |
        echo "${{ env.EC2_KEY }}" > key.pem
        chmod 600 key.pem
        ssh -o StrictHostKeyChecking=no -i key.pem "${{ env.EC2_USER }}@${{ env.EC2_HOST }}" << 'EOF'
          cd /var/www/rosecrest
          tar xzf deploy.tar.gz
          rm deploy.tar.gz

    - name: SSH and setup prod env
      run: |
         echo "${{ env.EC2_KEY }}" > key.pem
         chmod 600 key.pem
         ssh -o StrictHostKeyChecking=no -i key.pem "${{ env.EC2_USER }}@${{ env.EC2_HOST }}" << 'EOF'
           cd /var/www/rosecrest/client
           rm .env
           mv prod.env .env

    - name: SSH and restart server
      run: |
        ssh -o StrictHostKeyChecking=no -i key.pem "${{ env.EC2_USER }}@${{ env.EC2_HOST }}" << 'EOF'
          cd /var/www/rosecrest
          sudo systemctl restart nginx
          pm2 delete server || true
          pm2 kill
          cd /var/www/rosecrest/server
          pm2 start ts-node -- --type-check -r tsconfig-paths/register src/index.ts